generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                      @id @default(uuid())
  email                   String                      @unique
  username                String                      @unique
  password                String?
  emailVerified           DateTime?
  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt
  lastLoginAt             DateTime?
  lastLoginIp             String?
  status                  UserStatus                  @default(ACTIVE)
  accounts                Account[]
  createdNotes            AdminNote[]                 @relation("AdminNoteCreatedBy")
  adminNotes              AdminNote[]                 @relation("AdminNoteUser")
  auditLogs               AuditLog[]
  comments                Comment[]                   @relation("UserComments")
  media                   Media[]                     @relation("UserMedia")
  posts                   Post[]                      @relation("UserPosts")
  sessions                Session[]
  notificationPreferences UserNotificationPreference?
  profile                 UserProfile?
  roles                   UserRole[]
  votes                   Vote[]
}

model UserProfile {
  id          String  @id @default(uuid())
  userId      String  @unique
  displayName String?
  bio         String?
  socialLinks Json?
  avatarUrl   String?
  signature   String?
  user        User    @relation(fields: [userId], references: [id])
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  device        String?  // e.g., "Chrome on Windows"
  ip            String?  // e.g., "192.168.1.1"
  location      String?  // e.g., "Hanoi, Vietnam"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String         @id @default(uuid())
  title       String
  slug        String         @unique
  content     String
  summary     String?
  status      PostStatus     @default(PUBLISHED)
  authorId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  publishedAt DateTime?
  deletedAt   DateTime?
  version     Int            @default(1)
  isFeatured  Boolean        @default(false)
  viewCount   Int            @default(0)
  comments    Comment[]
  author      User           @relation("UserPosts", fields: [authorId], references: [id])
  categories  PostCategory[]
  tags        PostTag[]
  votes       Vote[]
  Media       Media[]        @relation("MediaToPost")
}

model Category {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  description String?
  parentId    String?
  order       Int            @default(0)
  parent      Category?      @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[]     @relation("CategoryParent")
  posts       PostCategory[]
}

model PostCategory {
  postId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])

  @@id([postId, categoryId])
}

model Tag {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  posts       PostTag[]
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Media {
  id           String   @id @default(uuid())
  url          String
  type         String
  size         Int
  uploadedById String?
  createdAt    DateTime @default(now())
  uploadedBy   User?    @relation("UserMedia", fields: [uploadedById], references: [id])
  Post         Post[]   @relation("MediaToPost")
}

model Comment {
  id        String        @id @default(uuid())
  postId    String
  authorId  String
  parentId  String?
  content   String
  status    CommentStatus @default(APPROVED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  ipAddress String?
  isSpam    Boolean       @default(false)
  reported  Boolean       @default(false)
  author    User          @relation("UserComments", fields: [authorId], references: [id])
  parent    Comment?      @relation("CommentParent", fields: [parentId], references: [id])
  children  Comment[]     @relation("CommentParent")
  post      Post          @relation(fields: [postId], references: [id])
  votes     Vote[]
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  commentId String?
  value     Int
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId, commentId])
}

model AdminNote {
  id          String   @id @default(uuid())
  userId      String
  note        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation("AdminNoteCreatedBy", fields: [createdById], references: [id])
  user        User     @relation("AdminNoteUser", fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  target    String?
  ip        String?
  createdAt DateTime @default(now())
  meta      Json?
  user      User?    @relation(fields: [userId], references: [id])
}

model SiteSetting {
  key       String   @id
  value     String
  type      String?
  updatedAt DateTime @updatedAt
}

model UserNotificationPreference {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String  @unique
  emailComment    Boolean @default(true)
  emailReply      Boolean @default(true)
  emailFollower   Boolean @default(false)
  emailMention    Boolean @default(false)
  emailNewsletter Boolean @default(false)
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  EMAIL_UNVERIFIED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  PENDING
  TRASH
  DELETED
}

enum CommentStatus {
  APPROVED
  PENDING
  SPAM
  TRASH
  DELETED
}
