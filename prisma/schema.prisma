// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  EMAIL_UNVERIFIED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  PENDING
  TRASH
  DELETED
}

enum CommentStatus {
  APPROVED
  PENDING
  SPAM
  TRASH
  DELETED
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  username      String      @unique
  password      String?
  emailVerified DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastLoginAt   DateTime?
  lastLoginIp   String?
  status        UserStatus  @default(EMAIL_UNVERIFIED)
  profile       UserProfile?
  roles         UserRole[]
  sessions      Session[]
  accounts      Account[]
  posts         Post[]      @relation("UserPosts")
  comments      Comment[]   @relation("UserComments")
  votes         Vote[]
  media         Media[]     @relation("UserMedia")
  adminNotes    AdminNote[] @relation("AdminNoteUser")
  createdNotes  AdminNote[] @relation("AdminNoteCreatedBy")
  auditLogs     AuditLog[]
}

model UserProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  displayName String?
  bio         String?
  socialLinks Json?
  avatarUrl   String?
  signature   String?
  user        User     @relation(fields: [userId], references: [id])
}

model Role {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])
  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  @@id([roleId, permissionId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Account {
  id                 String   @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires   DateTime
  @@id([identifier, token])
}

model Post {
  id          String      @id @default(uuid())
  title       String
  slug        String      @unique
  content     String
  summary     String?
  status      PostStatus  @default(DRAFT)
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?
  deletedAt   DateTime?
  version     Int         @default(1)
  isFeatured  Boolean     @default(false)
  viewCount   Int         @default(0)
  author      User        @relation("UserPosts", fields: [authorId], references: [id])
  categories  PostCategory[]
  tags        PostTag[]
  comments    Comment[]
  votes       Vote[]
}

model Category {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  description String?
  parentId    String?
  order       Int            @default(0)
  parent      Category?      @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[]     @relation("CategoryParent")
  posts       PostCategory[]
}

model PostCategory {
  postId     String
  categoryId String
  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  @@id([postId, categoryId])
}

model Tag {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  posts       PostTag[]
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])
  @@id([postId, tagId])
}

model Media {
  id           String   @id @default(uuid())
  url          String
  type         String
  size         Int
  uploadedById String?
  createdAt    DateTime @default(now())
  uploadedBy   User?    @relation("UserMedia", fields: [uploadedById], references: [id])
}

model Comment {
  id         String        @id @default(uuid())
  postId     String
  authorId   String
  parentId   String?
  content    String
  status     CommentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?
  ipAddress  String?
  isSpam     Boolean       @default(false)
  reported   Boolean       @default(false)
  post       Post          @relation(fields: [postId], references: [id])
  author     User          @relation("UserComments", fields: [authorId], references: [id])
  parent     Comment?      @relation("CommentParent", fields: [parentId], references: [id])
  children   Comment[]     @relation("CommentParent")
  votes      Vote[]
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  commentId String?
  value     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, postId])
}

model AdminNote {
  id          String   @id @default(uuid())
  userId      String
  note        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  user        User     @relation("AdminNoteUser", fields: [userId], references: [id])
  createdBy   User     @relation("AdminNoteCreatedBy", fields: [createdById], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  target    String
  ip        String
  createdAt DateTime @default(now())
  meta      Json?
  user      User?    @relation(fields: [userId], references: [id])
}

model SiteSetting {
  key       String   @id
  value     String
  type      String
  updatedAt DateTime @updatedAt
}
